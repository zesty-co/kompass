{{- if .Values.rightsizing.enabled }}
---
# Service Account for the validation job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-ebs-csi-validator
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"  # Run before the validation job
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
---
# RBAC Role with permissions to check for CSI driver and storage classes
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aws-ebs-csi-validator
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
rules:
- apiGroups: ["storage.k8s.io"]
  resources: ["csidrivers", "storageclasses"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["namespaces", "services"]
  verbs: ["get", "list"]
---
# Bind the role to the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aws-ebs-csi-validator
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
subjects:
- kind: ServiceAccount
  name: aws-ebs-csi-validator
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: aws-ebs-csi-validator
  apiGroup: rbac.authorization.k8s.io
---
# The validation job
apiVersion: batch/v1
kind: Job
metadata:
  name: aws-ebs-csi-validation
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"  # Run after the service account is created
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
spec:
  ttlSecondsAfterFinished: 300  # Keep the job for 5 minutes after completion
  template:
    metadata:
      name: aws-ebs-csi-validation
      labels:
        app.kubernetes.io/name: aws-ebs-csi-validation
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: aws-ebs-csi-validator
      containers:
      - name: aws-ebs-csi-validator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          echo "Validating AWS EBS CSI Driver installation..."
          
          # Check if the CSI driver is installed by looking for the CSIDriver object
          if kubectl get csidriver ebs.csi.aws.com &> /dev/null; then
            echo "‚úÖ AWS EBS CSI Driver is installed"
          else
            echo "‚ùå AWS EBS CSI Driver is not installed"
            echo "Please install the AWS EBS CSI Driver before proceeding."
            echo "You can install it using the AWS EBS CSI Driver Helm chart or as an EKS add-on."
            exit 1
          fi
          
          # Check for the controller deployment
          if kubectl get deployment -n kube-system ebs-csi-controller &> /dev/null; then
            echo "‚úÖ AWS EBS CSI Controller deployment found"
          else
            echo "‚ùå AWS EBS CSI Controller deployment not found"
            echo "The AWS EBS CSI Driver may not be properly installed."
            exit 1
          fi
          
          # Check for the daemonset
          if kubectl get daemonset -n kube-system ebs-csi-node &> /dev/null; then
            echo "‚úÖ AWS EBS CSI Node DaemonSet found"
          else
            echo "‚ùå AWS EBS CSI Node DaemonSet not found"
            echo "The AWS EBS CSI Driver may not be properly installed."
            exit 1
          fi
          
          # Check for expected storage class
          STORAGE_CLASS_NAME="{{ .Values.victoriaMetrics.server.persistentVolume.storageClassName | default "ebs-sc" }}"
          if kubectl get storageclass $STORAGE_CLASS_NAME &> /dev/null; then
            echo "‚úÖ StorageClass '$STORAGE_CLASS_NAME' exists"
            
            # Verify that the storage class uses the AWS EBS CSI provisioner
            PROVISIONER=$(kubectl get storageclass $STORAGE_CLASS_NAME -o jsonpath='{.provisioner}')
            if [ "$PROVISIONER" = "ebs.csi.aws.com" ]; then
              echo "‚úÖ StorageClass uses AWS EBS CSI provisioner"
            else
              echo "‚ùå StorageClass '$STORAGE_CLASS_NAME' uses provisioner '$PROVISIONER', instead of 'ebs.csi.aws.com'"
              echo "Please ensure your StorageClass uses the correct provisioner."
              exit 1
            fi
          else
            echo "‚ùå StorageClass '$STORAGE_CLASS_NAME' does not exist"
            echo "Please create the required StorageClass with provisioner 'ebs.csi.aws.com'."
            exit 1
          fi

          # Print empty line for better readability
          echo ""

          KSM_ENABLED="{{ index .Values "kubeStateMetrics" "enabled" }}"

          if [ "$KSM_ENABLED" = "true" ]; then
            echo "Validating kube-state-metrics installation..."
            KSM_FORCE="{{ index .Values "kubeStateMetrics" "force" }}"
      
            if [ "$KSM_FORCE" = "true" ]; then
              echo "‚ö†Ô∏è kubeStateMetrics.force is set to true ‚Äî kubeStateMetrics will be installed even if it already exists"
              echo "‚úÖ Skipping kubeStateMetrics validation"
            else
              # Find the namespace where kubeStateMetrics is installed
              KSM_NAMESPACE=$(kubectl get deployment --all-namespaces -l app.kubernetes.io/name=kube-state-metrics -o jsonpath='{.items[0].metadata.namespace}')
              if [ -z "$KSM_NAMESPACE" ]; then
                echo "‚úÖ kube-state-metrics deployment not found in any namespace - it will be installed as part of Zesty Kompass Pod-RightSizing"
              else
                echo "‚úÖ kube-state-metrics deployment found in namespace: $KSM_NAMESPACE"
                KSM_EXISTS=true
              fi
              
              if [ -n "$KSM_EXISTS" ] && [ "$KSM_NAMESPACE" != "{{ .Release.Namespace }}" ]; then
                # Retrieve the kube-state-metrics service details
                KSM_SVC=$(kubectl get svc -n $KSM_NAMESPACE -l app.kubernetes.io/name=kube-state-metrics -o jsonpath='{.items[0].metadata.name}')
                if [ -n "$KSM_SVC" ]; then
                    echo "‚úÖ kubeStateMetrics service found: $KSM_SVC in namespace: $KSM_NAMESPACE"
                    echo ""
                    echo "‚ö†Ô∏è Please add to the values file kubeStateMetrics.enabled: false AND kubeStateMetrics.serviceName: $KSM_SVC OR use kubeStateMetrics.force: true"
                    exit 1
                else
                    echo "‚ö†Ô∏è kubeStateMetrics service not found in namespace: $KSM_NAMESPACE"
                    exit 1
                fi
              fi
            fi
          else
            KSM_SVC_NAME="{{ index .Values "kubeStateMetrics" "serviceName" | default "" }}"
            echo "‚ö†Ô∏è kubeStateMetrics.enabled is set to false ‚Äî kubeStateMetrics will not be installed, going to use the existing service: $KSM_SVC_NAME"
            echo "‚úÖ Skipping kubeStateMetrics validation"
          fi
          echo ""
          echo "üéâ All validations passed! Your cluster is ready for Zesty Kompass Pod-RightSizing installation."
      restartPolicy: Never
  backoffLimit: 0
{{- end }}